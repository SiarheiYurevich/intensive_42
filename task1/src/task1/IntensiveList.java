package task1;

import java.util.Comparator;

public interface IntensiveList<E> {
    /**
     * @return Возвращает текущий размер листа
     */
    int size();

    /**
     * Добавляет элемент {@code  element} в список
     *
     * @param element элемент, который необходимо вставить
     */
    void add(E element);


    /**
     * Добавляет элемент {@code  element} в список по укзаанному индексу  {@code  index}
     *
     * @param index   индекс, по которому нужно вставить элемент
     * @param element элемент, который необходимо вставить по указанному индексу
     */
    void add(int index, E element);

    /**
     * Возвращает элемент {@code  element} по укзаанному индексу  {@code  index}
     *
     * @param index - индекс, по которому нужно найти элемент
     * @return элемент по указанному индексу
     */
    E get(int index);

    /**
     * Перезаписывает элемент {@code  element} в список по укзаанному индексу  {@code  index}
     *
     * @param index   индекс по которому будет перезаписан элемент
     * @param element элемент, который будет записан по переданному индексу
     * @return возвращает элемент, который был перезаписан
     */
    E set(int index, E element);

    /**
     * Удаляет элемент в списке по укзаанному индексу  {@code  index}
     *
     * @param index индекс, по которму будет удален элемент
     * @return возвращает удаленный элемент
     */
    E remove(int index);

    /**
     * Пересоздает массив с null значениями, размером DEFAULT_CAPACITY = 10 и устанавливает размер 0
     */
    void clear();

    /**
     * производит быструю сортировку по возрастанию используя переданный компаратор
     *
     * @param comparator переданный компаратор, по которому происходит сравнение объектов
     */
    void quickSort(Comparator<E> comparator);

    /**
     * Поверяет не отсортирован ли список
     * Если размер списка <= 1, проверка не проводится, считается что список отсортирован
     *
     * @param comparator переданный компаратор, по которому происходит сравнение объектов
     * @return true, если список отсортирован; иначе -  false
     */
    boolean isSorted(Comparator<E> comparator);

    /**
     * Изменяет размер списка до переданного размера {@code  size}
     *
     * @param size устанавливаемый размер списка
     */
    void split(int size);
}
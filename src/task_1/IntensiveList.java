package task_1;

import java.util.Comparator;

/**
 * Интерфейс списка
 * @author Змеев Александр
 * @param <E> тип элементов, хранимых в списке
 */
public interface IntensiveList<E> {

    /**
     *Возвращает количество элементов в списке
     * @return количество элементов
     */
    int size();

    /**
     *Производит вставку элемента в конец списка.
     * @param element элемент, который необходимо вставить
     */
    void add(E element);

    /**
     *Производит вставку элемента в список по указанному индексу.
     * @param index позиция в списке, в которую вставляется элемент
     * @param element элемент, который необходимо вставить
     */
    void add(int index, E element);

    /**
     * Возвращает элемент списка по указанному индексу.
     * @param index позиция в списке, элемент которой необходимо получить
     * @return ссылка элемента по указанному индексу
     */
    E get(int index);

    /**
     * Заменяет элемент списка по указанному индексу на элемент, переданный в аргументе.
     * @param index позиция в списке, элемент которой необходимо заменить
     * @param element элемент для замены
     * @return ссылка на старый элемент по указанному индексу
     */
    E set(int index, E element);

    /**
     * Удаляет элемент из списка по указанному индексу.
     * @param index позиция в списке, элемент которой необходимо удалить
     * @return ссылка на удаленный элемент по указанному индексу
     */
    E remove(int index);

    /**
     * Удаляет все элементы из списка.
     */
    void clear();

    /**
     * Производит быструю сортировку списка.
     * Сравнение элементов производится по правилам, которые задает
     * переданный в качестве параметра компаратор
     * @param comparator компаратор, задающий правила сортировки
     */
    void quickSort(Comparator<E> comparator);

    /**
     * Возвращает состояние упорядоченности элементов в списке,
     * сравнивая элементы в естественном порядке.
     * @return true - список отсортирован, false - список не отсортирован
     */
    boolean isSorted();

    /**
     * Возвращает состояние упорядоченности элементов в списке по
     * правилам сравнения, которые заданы компаратором.
     * @param comparator компаратор, задающий правила сортировки
     * @return true - список отсортирован, false - список не отсортирован
     */
    boolean isSorted(Comparator<E> comparator);

    /**
     * Обрезает список до указанного размера.
     * @param size новый размер массива
     */
    void split(int size);
}
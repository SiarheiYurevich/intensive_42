package task_1;

import java.util.Comparator;

/**
 * Данный интерфейс объявляет набор методов, необходимых для реализации списка -
 * коллекции, последовательно хранящей в себе элементы заданного типа. Данная коллекция
 * способна хранить повторяющиеся элементы.
 * <p>{@code IntensiveList} включает в себя:
 * <ul>
 * <li>Метод для проверки количества хранимых элементов,
 * <li>2 метода для вставки элементов: в конец списка и на указанную позицию,
 * <li>Метод для получения элемента по индексу,
 * <li>Метод для замещения элемента по индексу другим,
 * <li>Метод для удаления элемента по индексу,
 * <li>Метод для очистки списка,
 * <li>Метод для сортировки списка по правилам переданного {@code Comparator},
 * <li>Метод для проверки отсортированности списка по правилам переданного {@code Comparator},
 * <li>Метод для сокращения количества элементов в списке до указанного значения.
 * </ul>
 *
 * @param <E> тип элементов, хранимых в {@code IntensiveList}
 * @author Максим Булычев
 */
public interface IntensiveList<E> {

    /**
     * Возвращает количество элементов, содержащихся в {@code IntensiveList}
     *
     * @return количество элементов в {@code IntensiveList}
     */
    int size();

    /**
     * Вставляет переданный элемент в конец {@code IntensiveList}.
     *
     * @param element элемент, который необходимо вставить
     */
    void add(E element);

    /**
     * Вставляет переданный элемент в {@code IntensiveList} на указанную позицию.
     *
     * @param index   позиция, на которую необходимо вставить элемент
     * @param element элемент, который необходимо вставить
     */
    void add(int index, E element);

    /**
     * Возвращает элемент {@code IntensiveList} по указанной позиции.
     *
     * @param index индекс элемента, который необходимо получить
     * @return ссылка на найденный элемент
     */
    E get(int index);

    /**
     * Заменяет элемент в {@code IntensiveList} на указанной позиции на новый переданный элемент.
     *
     * @param index   позиция, на которой необходимо произвести замену элемента
     * @param element элемент, который необходимо вставить
     * @return - ссылка на удалённый элемент
     */
    E set(int index, E element);

    /**
     * Удаляет элемент с указанным индексом из {@code IntensiveList}.
     *
     * @param index индекс элемента, который необходимо удалить
     * @return ссылка на удалённый элемент
     */
    E remove(int index);

    /**
     * Удаляет все элементы из {@code IntensiveList},
     * вместимость приводит к стандартному значению.
     */
    void clear();

    /**
     * Сортирует элементы {@code IntensiveList} в порядке возрастания,
     * используя переданный {@code Comparator}.
     *
     * @param comparator компаратор, который будет использоваться для сравнения элементов
     */
    void quickSort(Comparator<E> comparator);

    /**
     * Проверяет, отсортированы ли элементы в {@code IntensiveList} в порядке возрастания,
     * используя переданный {@code Comparator}.
     *
     * @param comparator компаратор, который будет использоваться для сравнения элементов
     * @return {@code true}, если список отсортирован, иначе {@code false}
     **/
    boolean isSorted(Comparator<E> comparator);

    /**
     * Уменьшает вместимость внутреннего массива до указанного значения.
     * Элементы, которые оказались за пределами, не сохраняются.
     *
     * @param size новая вместимость массива
     */
    void split(int size);
}
